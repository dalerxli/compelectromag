//~ border C(t = 0*pi,2*pi) {
//~ 	x=cos(t);
//~ 	y=sin(t);
//~ }


int c = 0;
border Gamma1(t=0,pi)   {x=cos(t); y=sin(t); label=c; }
border Gamma2(t=pi,2*pi){x=cos(t); y=sin(t); label=c; }
border Inner(t=2*pi,0*pi){x=0.1+0.3*cos(t); y=0.5*sin(t);}

//plot(Gamma1(19) + Gamma2(8)+Inner(20));
//border B(t=0,pi) { Gamma1+Gamma2+Inner; } // doesn't work
//plot(B(29));



mesh Th = buildmesh(Gamma1(90)+Gamma2(40)+Inner(20));
fespace Vh(Th,P1);

Vh u,v;   // defines u and v as piecewise-P1 continuous functions
func f= x*y;   // definition of a called f function

real cpu=clock();  				// get the clock in second

problem Poisson(u,v,solver=LU) =   		// defines the PDE
	int2d(Th)(dx(u)*dx(v) + dy(u)*dy(v))    // bilinear part
	- int2d(Th)( f*v)           		// right hand side
	+ on(C,u=0)  ; 				// Dirichlet boundary condition

Poisson;

//plot(Th);
plot(u);
cout << " CPU time = " << clock()-cpu << endl;
