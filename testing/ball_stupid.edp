/*******************************************************************************
 * 
 * Move a ball according to the stress tensor
 * 
 * Regions: ball, vacuum, frame
 * Solve for E (phi) on union -> get stress
 * Solve for movement on ball
 * move ball
 * Repeat (update union, keep track of regions)
 * 
 * TODO: define regions as a function of constants, then use adaptmesh
 * 
 ******************************************************************************/

include "borders.idp"

macro plot3d(obj, label) plot(obj, fill=true, value=true, ShowAxes=true, dim=3, wait=true, cmm = label); // EOM
macro plot2d(obj, label) plot(obj, fill=true, value=true, ShowAxes=true, dim=2, wait=true, cmm = label); // EOM


// Material parameters

real e0 = 8.854187 *1;
real[int] epsilon1(9);
real[int] epsilon2(9);

epsilon1 = [ 2.2*e0,      0,      0,
                  0, 2.2*e0,      0,
                  0,      0, 2.2*e0 ];

epsilon2 = [ 1.*e0, 0, 0,
             0, 1.*e0, 0,
             0, 0, 1.*e0 ];


// Geometry parameters

real[int] ballstart(2);
ballstart = [0., 1.];
real ballr = 0.5;
int ballh = 25;
int frameh = 30;


// Simulation parameters

real dt = 0.1;
real tend = dt*30;
real switchtime = tend/2;
real phiCup = -2;   // constrain phi on upper border
real phiCdown = 2;  // constrain phi on lower border


// Border construction

int Lball = 101, Lboxo = 102, Lboxi = 103,
    Lboxdown = 104, Lboxright = 105, Lboxup = 106, Lboxleft = 107;

borderLineCycle4([-1,0], Bod, Lboxdown,
                 [ 5,0], Bor, Lboxright,
                 [ 5,5], Bou, Lboxup,
                 [-1,5], Bol, Lboxleft)

borderLineCycle7([-0.9, 0.1], Bid,  Lboxi,
                 [ 4.9, 0.1], Bir,  Lboxi,
                 [ 4.9, 3.1], Bii1, Lboxi,
                 [ 3.5, 3.1], Bii2, Lboxi,
                 [ 2  , 4  ], Bii3, Lboxi,
                 [ 2  , 4.9], Biu,  Lboxi,
                 [-0.9, 4.9], Bil,  Lboxi)

macro bordersNonball(n) Bod(n) + Bor(n) + Bou(n) + Bol(n)
  + Bid(n) + Bir(n) + Bii1(n/3) + Bii2(n/3) + Bii3(n/3) + Biu(n) + Bil(n) // EOM

border B(t=0,2*pi) {
  x = ballstart[0]+ballr*cos(t);
  y = ballstart[1]+ballr*sin(t);
  label = Lball;
}

////////////////////////////////////////////////////////////////////////////////

for(real t=0; t < tend; t+=dt) {

  mesh Ballh = buildmesh( B(ballh) );
  mesh Allh = buildmesh( B(ballh) + bordersNonball(frameh));

  fespace Ph(Allh,P0);
  Ph reg = region;
  int rE  = reg(4,4);  // frame
  int rI  = reg(0,4);  // vacuum
  int rB  = reg(ballstart[0],ballstart[1]);  // ball region

  macro setEps(num) (reg==rE||reg==rB)*epsilon1[num] + (reg==rI)*epsilon2[num]  // EOM
  Ph e11 = setEps(0);
  Ph e12 = setEps(1);
  Ph e13 = setEps(2);
  Ph e21 = setEps(3);
  Ph e22 = setEps(4);
  Ph e23 = setEps(5);
  Ph e31 = setEps(6);
  Ph e32 = setEps(7);
  Ph e33 = setEps(8);
//~   plot3d(e11 , "");



  fespace Vh(Allh,P2);
  Vh phi, w;

  if(abs(t-switchtime)<dt/2) {
    real tmp = phiCup; phiCup = phiCdown; phiCdown = tmp;
  }

  problem LaplaceVarf(phi,w,solver=CG) = int2d(Allh,qft=qf5pT)(
      e11 * dx(phi)*dx(w)
    + e12 * dx(phi)*dy(w)
    + e21 * dy(phi)*dx(w)
    + e22 * dy(phi)*dy(w))
    + on(Lboxup,phi = phiCup)
    + on(Lboxdown,phi = phiCdown)
    ;
  LaplaceVarf;


  Vh Ex = dx(phi);
  Vh Ey = dy(phi);
  Vh Ez = dx(phi);

  // TODO: tensor this
  Vh D1 = Ex * e11 + Ey * e12 + Ez * e13;
  Vh D2 = Ex * e21 + Ey * e22 + Ez * e23;
  Vh D3 = Ex * e31 + Ey * e32 + Ez * e33;
  Vh T11 = - Ex * D1  + 0.5 * (Ex*D1 + Ey*D2 + Ez*D3);
  Vh T22 = - Ey * D2  + 0.5 * (Ex*D1 + Ey*D2 + Ez*D3);
  Vh T33 = - Ez * D3  + 0.5 * (Ex*D1 + Ey*D2 + Ez*D3);
  Vh T12 = - Ex * D2;  // probably problematic
  Vh T21 = - Ey * D1;
  Vh T13 = - Ex * D3;
  Vh T23 = - Ex * D3;
//~ T11 = -T11; T12 = -T12; T21 = -T21; T22 = -T22;


// Take multiplication of derivatives
//~   Vh f1 = dx(T11)+dy(T21);  // should be ~0
//~   Vh f1 = dx(T11)+ dy( -Ey * (Ex*e11 + Ey*e12 + Ez*e13) );
//~   Vh f1 = dx(T11) - dy(Ey*Ex*e11) - dy(Ey*Ey*e12) - dy(Ey*Ez*e13);
//~   Vh f1 = dx(T11) - e11*(dy(Ey)*Ex+Ey*dy(Ex)) - e12*(dy(Ey)*Ey+Ey*dy(Ey)) - e13*(dy(Ey)*Ez+Ey*dy(Ez));
  Vh f1 = dx(T11) - e11*(dyy(phi)*Ex+Ey*dyx(phi)) - e12*(2*dyy(phi)*Ey);

//~   Vh f2 = dx(T12)+dy(T22);
  Vh f2 = - e11*(2*dxx(phi)*Ex) - e12*(dxx(phi)*Ey+Ex*dxy(phi)) + dy(T22);



// wiki version:
//~ D1 = Ex*e11; D2 = Ey * e22; D3 = Ez * e33;
//~ T11 = Ex*D1 - 0.5 * (Ex*D1  );  T12 = Ex*D2;
//~ T22 = Ey*D2 - 0.5 * (Ey*D2  );  T21 = Ey*D1;
//~ f1 = T11;
//~ f2 = T22;
//~ f1 = dx(T11)+dy(T12);
//~ f2 = dx(T22)+dy(T21);

//~ f1 = Ex;
//~ f2 = Ey;
//~ T11 = 



  // TODO: acceleration, inertia (verlet?)
  ballstart[0] += int1d(Ballh, Lball) (f1) *dt;
  ballstart[1] += int1d(Ballh, Lball) (f2) *dt;

  plot2d(phi, "phi");
//~   plot2d(Allh, "mesh");
//~   plot2d([f1, f2], "force field, ball total: " + int2d(Ballh)(f2));



////////////////////////////////////////////////////////////////////////////////
// Plotting environment
  macro plotenv(v, lab) Venvh e#v = v; plot2d(e#v, lab); // EOM
  macro plotenv2(v1, v2, lab) Venvh e#v1=v1; Venvh e#v2=v2; plot2d([e#v1,e#v2], lab); // EOM

  border Benv(t=0,2*pi) { x = ballstart[0]+2*ballr*cos(t); y = ballstart[1]+2*ballr*sin(t); label = Lball; }
  mesh Envh = buildmesh(Benv(3*ballh));
  fespace Venvh(Envh, P2);
//~   plot2d(Envh, "env mesh");

//~   plotenv(phi, "phi");
//~   plotenv2(Ex,Ey, "E field");
//~   plotenv2(D1,D2, "D field");
//~ 
//~   plotenv(T11, "T11");
//~   Vh dxT11 = dx(T11); plotenv(dxT11, "dx(T11)");
//~   plotenv(T22, "T22");
//~   Vh dyT22 = dy(T22); plotenv(dyT22, "dy(T22)");
//~ 
//~   plotenv(T12, "T12 == T21");
//~   Vh dxT12 = dx(T12); plotenv(dxT12, "dx(T12)");
//~   Vh dyT12 = dy(T12); plotenv(dyT12, "dy(T12)");
//~ 
//~   plotenv2(f1,f2, "force field, int(x): " + int2d(Ballh)(f1) + ", int(y): " + int2d(Ballh)(f2));
////////////////////////////////////////////////////////////////////////////////
}

