/*******************************************************************************
 * 
 * Move a ball according to the stress tensor
 * 
 * Regions: ball, vacuum, frame
 * Solve for E (phi) on union -> get stress
 * Solve for movement on ball
 * move ball
 * Repeat
 * 
 ******************************************************************************/


load "Element_P3"
include "borders.idp"
include "linalg.idp"
include "misc.idp"


// Material parameters

//~ real chargedens = 0;
real chargedens = -10;

real[int] epsilon1(9);
real[int] epsilon2(9);
real[int] epsilon3(9);

real e0 = 8.854187 *1;

epsilon1 = 2.2*e0 * [ 1, 0, 0,
                      0, 1, 0,
                      0, 0, 1 ];

epsilon2 = 1.0*e0 * [ 1, 0, 0,
                      0, 1, 0,
                      0, 0, 1 ];

//~ epsilon3 = 1e6*e0 * [ 1, 0, 0,           // ball = conductor
//~                       0, 1, 0,
//~                       0, 0, 1 ];

//~ epsilon3 = 2.2*e0 * [ 1, 0, 0,           // ball = dielectric
//~                       0, 1, 0,
//~                       0, 0, 1 ];

epsilon3 = 1.0*e0 * [ 1, 0, 0,           // ball = isolator
                      0, 1, 0,
                      0, 0, 1 ];

// Geometry parameters

real[int] ballpos(2);
ballpos = [1., 4.];
real ballr = 0.5;
//~ int ballh = 60;
//~ int frameh = 90;
//~ int ballh = 20;
//~ int frameh = 40;
int ballh = 15;
int frameh = 20;

real[int] ballposold = ballpos;


// Simulation parameters

real dt = 0.1;
real tend = dt*30;
real switchtime = tend/2;
real phiChi = 2;      // high constraint for phi
real phiClo = -2;     // low constraint for phi

real[int] ballv(2);
ballv = [0, 0];


// Border construction

int Lball = 101, Lboxo = 102, Lboxi = 103,
    Lboxdown = 104, Lboxright = 105, Lboxup = 106, Lboxleft = 107,
    Lballenv = 108;
int Label1 = Lboxdown, Label2 = Lboxup;


borderLineCycle4([-1,0], Bod, Lboxdown,
                 [ 5,0], Bor, Lboxright,
                 [ 5,5], Bou, Lboxup,
                 [-1,5], Bol, Lboxleft)

borderLineCycle8([3, 0.1], Bid,  Lboxi,
                 [ 4.9, 0.1], Bir,  Lboxi,
                 [ 4.9, 3.1], Bii1, Lboxi,
                 [ 3.5, 3.1], Bii2, Lboxi,
                 [ 2  , 4  ], Bii3, Lboxi,
                 [ 2  , 4.9], Biu,  Lboxi,
                 [-0.9, 4.9], Bil,  Lboxi,
                 [-0.9, 3], Bil2,  Lboxi)

macro bordersNonball(n) Bod(n) + Bor(n) + Bou(n) + Bol(n)
  + Bid(n) + Bir(n) + Bii1(n/3) + Bii2(n/3) + Bii3(n/3) + Biu(n) + Bil(n) + Bil2(n) // EOM

border B(t=0,2*pi) {
  x = ballpos[0]+ballr*cos(t);
  y = ballpos[1]+0.5*ballr*sin(t);
  label = Lball;
}


// Some linear algebra helper macros


////////////////////////////////////////////////////////////////////////////////

//~ ofstream of("forces");
for(real tau=0; tau < tend; tau+=dt) {

  // Build meshes

  mesh Ballh = buildmesh( B(ballh) );
  mesh Allh = buildmesh( B(ballh) + bordersNonball(frameh));


  // Define regions and set material parameters accordingly

  fespace Ph(Allh,P0);

  Ph reg = region;
  int rE  = reg( 4.95,4.95);                        // frame
  int rI  = reg( 2.5 ,1   );                        // vacuum
  int rB  = reg(ballpos[0],ballpos[1]);      // ball region

  macro rEps(num) (reg==rE)*epsilon1[num]
                + (reg==rI)*epsilon2[num]
                + (reg==rB)*epsilon3[num]  // EOM
  func EPS = [ [ rEps(0), rEps(1), rEps(2) ],
               [ rEps(3), rEps(4), rEps(5) ],
               [ rEps(6), rEps(7), rEps(8) ] ];

  func source = (reg==rE)*0 + (reg==rI)*0 + (reg==rB)*chargedens;


  // Setup

  fespace Vh(Allh,P3);
  Vh phi, w;

  if(timedist(tau, 0.2*tend, dt)) {
    Label1 = Lboxright;
    Label2 = Lboxleft;
  }
  if(timedist(tau, 0.6*tend, dt)) {
    swap(phiClo, phiChi, real, tmp);
  }


  // Solve the problem

  problem PoissonVarf(phi,w,solver=CG) = int2d(Allh)(
      EPS[0][0] * dx(phi)*dx(w)
    + EPS[0][1] * dx(phi)*dy(w)
    + EPS[1][0] * dy(phi)*dx(w)
    + EPS[1][1] * dy(phi)*dy(w) )
    - int2d(Allh)( source*w )
    + on(Label1,phi = phiChi)
    + on(Label2,phi = phiClo)
    ;
  PoissonVarf;


  // Calculate the stress tensor

  func E = [ -dx(phi), -dy(phi), 0 ];                 // E field, z=unused
  Vh[int] D(3);                                       // Anisotropic field
  mulMv(D, EPS, E);                                   // D(i) = eps(i, :) * E(:)

  Vh[int] T(9);                                       // stress tensor
  dyad(T, -E, D);
  T[0] = T[0] + 0.5*dotp(E, D);                       // add to the diag
  T[4] = T[4] + 0.5*dotp(E, D);
  T[8] = T[8] + 0.5*dotp(E, D);


  // Calculate the forces and apply collapsed Velocity Verlet on ball position

  Vh fx = dx(T[0])+dy(T[3]);                          // should be ~0
  Vh fy = dx(T[1])+dy(T[4]);
  fx = -fx;
  fy = -fy;

//~   real Fx = int1d(Ballh, Lball) (fx*N.x);
//~   real Fy = int1d(Ballh, Lball) (fy*N.y);
  real Fx = int2d(Ballh) (fx);  // same as above
  real Fy = int2d(Ballh) (fy);

  ballv[0] += Fx * dt / 1.;                           // ball mass := 1
  ballpos[0] = 2*ballpos[0] - ballposold[0] + dt*ballv[0];
  ballv[1] += Fy * dt / 1.;                           // ball mass := 1
  ballpos[1] = 2*ballpos[1] - ballposold[1] + dt*ballv[1];


  // Plotting

//~   plot2d(Allh, "mesh");
//~   Ph eps00 = EPS[0][0]; plot3d(eps00, "eps00");
  plot2d(phi, "phi");
//~   plot2d([D[0], D[1]], "D field");
//~   plot2d(T[0], "T11");
//~   plot2d(T[1], "T12");
//~   plot2d(T[3], "T21");
//~   plot2d(T[4], "T22");
//~   plot2d([fx, fy], "force field, Fx: " + Fx + ", Fy: " + Fy);


////////////////////////////////////////////////////////////////////////////////
// Plotting environment
  macro plotenv(tmp, v, lab) Venvh tmp = v; plot2d(tmp, lab); // EOM
  macro plotenv2(t1, t2, v1, v2, lab) Venvh t1=v1; Venvh t2=v2; plot2d([t1,t2], lab); // EOM

  border Benv(t=0,2*pi) { x = ballposold[0]+2*ballr*cos(t); y = ballposold[1]+2*ballr*sin(t); label = Lballenv; }
  mesh Envh = buildmesh(Benv(2*ballh));
  fespace Venvh(Envh, P3);
//~   plot2d(Envh, "env mesh");

//~   plotenv(ephi, phi, "phi");
//~   plotenv2(eEx, eEy, E[0], E[1], "E field");
//~   plotenv2(eDx, eDy, D[0], D[1], "D field");

//~   plotenv(eT11, T[0], "T11");
//~   plotenv(edT11, dx(T[0]), "dx(T11)");
//~   plotenv(eT22, T[4], "T22");
//~   plotenv(edT22, dy(T[4]), "dy(T22)");

//~   plotenv(eT12, T[1], "T12 == T21");
//~   plotenv(edxT12, dx(T[1]), "dx(T12)");
//~   plotenv(edyT12, dy(T[1]), "dy(T12)");

//~   plotenv2(efx, efy, fx, fy, "t=" + tau + ", force field, Fx: " + Fx + ", Fy: " + Fy);
//~   of << tau << "  " << Fx << "  " << Fy << endl;
////////////////////////////////////////////////////////////////////////////////

  ballposold = ballpos;

}
